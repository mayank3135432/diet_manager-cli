@startuml Diet Assistant Sequence Diagram

actor User
participant "UserInterface" as UI
participant "FoodDatabase" as DB
participant "UserProfile" as Profile
participant "CalorieCalculator" as Calculator
participant "DailyLog" as Log
participant "Food" as Food
participant "CompositeFood" as CFood

== Initialize System ==
User -> UI: start application
activate UI

opt Database loading error
    UI -> DB: loadDatabase()
    activate DB
    DB --> UI: database load status
    alt successful load
        UI --> User: system ready
    else error
        UI --> User: error loading database
    end
    deactivate DB
end

UI -> Profile: load user profile
UI -> Log: loadLog()
deactivate UI

== Search Food and Add to Log ==
User -> UI: view food logging screen
activate UI

loop until user completes logging
    User -> UI: search food(keywords)
    UI -> DB: searchFood(keywords)
    activate DB
    DB --> UI: return matching foods
    deactivate DB
    
    alt foods found
        UI --> User: display food options
        User -> UI: select food
        User -> UI: specify servings
        
        UI -> Log: addFood(food, servings)
        activate Log
        Log -> Food: getCalories()
        activate Food
        Food --> Log: calories
        deactivate Food
        Log -> Log: create LogEntry
        Log -> Log: saveLog()
        deactivate Log
        
        UI --> User: confirm food added
    else no foods found
        UI --> User: no matching foods
        opt create new food
            User -> UI: create new basic food
            UI -> DB: addBasicFood(...)
            activate DB
            DB -> DB: saveDatabase()
            deactivate DB
        end
    end
end
deactivate UI

== Create Composite Food Recipe ==
User -> UI: create new recipe
activate UI
UI --> User: recipe creation screen

User -> UI: enter recipe name
loop for each ingredient
    User -> UI: search ingredient
    UI -> DB: searchFood(keywords)
    activate DB
    DB --> UI: return matching foods
    deactivate DB
    
    alt ingredient found
        User -> UI: select ingredient & quantity
        UI -> CFood: addIngredient(food, servings)
        activate CFood
        deactivate CFood
    else ingredient not found
        User -> UI: create new basic food
        UI -> DB: addBasicFood(...)
        activate DB
        DB --> UI: new food created
        deactivate DB
        UI -> CFood: addIngredient(newFood, servings)
    end
end

User -> UI: save recipe
UI -> DB: addCompositeFood(name, ingredients)
activate DB
DB -> DB: saveDatabase()
DB --> UI: recipe saved confirmation
deactivate DB
UI --> User: recipe saved
deactivate UI

== Calculate Target Calories ==
User -> UI: request calorie calculation
activate UI
UI -> Profile: update profile if needed
activate Profile
deactivate Profile

alt BMR calculation
    UI -> Calculator: BMRCalculator.calculateTargetCalories(profile)
else Alternate calculation
    UI -> Calculator: AlternateCalculator.calculateTargetCalories(profile)
end
activate Calculator

Calculator -> Profile: getProfileData()
activate Profile
Profile --> Calculator: profile data
deactivate Profile

Calculator --> UI: targetCalories
deactivate Calculator
UI --> User: display target calories
deactivate UI

== View Daily Log Summary ==
User -> UI: view daily summary
activate UI
UI -> Log: get entries
activate Log
Log --> UI: entries list
deactivate Log

UI -> UI: initialize totalCalories = 0

loop for each entry in entries
    UI -> LogEntry: getTotalCalories()
    activate LogEntry
    LogEntry -> Food: getCalories()
    activate Food
    Food --> LogEntry: calories
    deactivate Food
    LogEntry --> UI: totalEntryCalories
    deactivate LogEntry
    UI -> UI: totalCalories += totalEntryCalories
end

opt compare with target
    UI -> Calculator: calculateTargetCalories(profile)
    activate Calculator
    Calculator --> UI: targetCalories
    deactivate Calculator
    UI -> UI: calculate difference
end

UI --> User: display daily summary with total calories
deactivate UI

@enduml